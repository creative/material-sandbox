{"version":3,"sources":["application-header/ApplicationHeader.module.scss","application/Application.module.scss","application-context/index.js","application-header/ApplicationHeader.js","reducer/initial-state.js","reducer/set-theme-mode.js","reducer/index.js","application/Application.js","reportWebVitals.js","index.js"],"names":["module","exports","ApplicationContext","createContext","cx","classNames","bind","styles","ApplicationHeader","useContext","dispatch","mode","state","theme","palette","dispatchThemeUpdate","useCallback","type","AppBar","position","Toolbar","Typography","variant","className","Tooltip","title","Link","href","color","target","rel","IconButton","sx","ml","onClick","initialState","setThemeMode","action","reducer","console","log","App","useReducer","contextValue","useMemo","themeContextValue","createMuiTheme","Provider","value","ThemeProvider","Paper","square","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Application","document","getElementById"],"mappings":"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","file":"static/js/main.c57035eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ApplicationHeader_title__2DJvT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"application\":\"Application_application__y1Xvy\",\"canvas\":\"Application_canvas__1T6P9\",\"main\":\"Application_main__2nGME\",\"left\":\"Application_left__3KQjv\",\"middle\":\"Application_middle__3IxIa\",\"middle-container\":\"Application_middle-container__2ohNT\",\"right\":\"Application_right__2sjlW\"};","import { createContext } from 'react';\n\nconst ApplicationContext = createContext();\n\nexport default ApplicationContext;","import { useCallback, useContext } from 'react';\nimport classNames from 'classnames/bind';\nimport AppBar from '@material-ui/core/AppBar';\nimport ApplicationContext from '../application-context';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport styles from './ApplicationHeader.module.scss';\n\nvar cx = classNames.bind(styles);\n\nconst ApplicationHeader = () => {\n  const { dispatch, state } = useContext(ApplicationContext);\n  const { theme } = state;\n  const { palette } = theme;\n  const { mode } = palette;\n\n  const dispatchThemeUpdate = useCallback(() => {\n    dispatch({ type: 'SET_THEME_MODE', mode: mode === 'dark' ? 'light' : 'dark' })\n  }, [dispatch, mode]);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={cx('title')}>\n          Material Sandbox\n        </Typography>\n        <Tooltip title=\"Github Repository\">\n          <Link\n            href=\"https://github.com/creative/material-sandbox\"\n            color=\"inherit\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            <GitHubIcon />\n          </Link>\n        </Tooltip>\n        <Tooltip title=\"Toggle light/dark theme\">\n          <IconButton sx={{ ml: 1 }} onClick={dispatchThemeUpdate} color=\"inherit\">\n            {mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default ApplicationHeader;","const initialState = {\n  theme: {\n    palette: {\n      mode: 'light',\n    }\n  }\n};\n\nexport default initialState;\n","/**\n * Sets the application theme mode.\n * @param {Object} state - The application state.\n * @param {Object} action - The reducer action.\n * @param {Object} action.mode- The theme mode value. (light|dark)\n */\nconst setThemeMode = (state, action) => {\n  const { theme } = state;\n  const { mode } = action;\n\n  return {\n    ...state,\n    theme: {\n      ...theme,\n      palette: { mode }\n    }\n  };\n};\n\nexport default setThemeMode;\n","import initialState from './initial-state';\nimport setThemeMode from './set-theme-mode';\n\nconst reducer = (state, action) => {\n  const { type } = action;\n\n  switch (type) {\n    case 'SET_THEME_MODE':\n      return setThemeMode(state, action);\n    default:\n      // eslint-disable-next-line no-console\n      console.log('WARNING: Unsupported reducer action.');\n      return state;\n  }\n};\n\nexport default reducer;\nexport { initialState };\n","import { useMemo, useReducer } from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport classNames from 'classnames/bind';\nimport ApplicationContext from '../application-context';\nimport ApplicationHeader from '../application-header/ApplicationHeader';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport reducer, { initialState } from '../reducer';\nimport styles from './Application.module.scss';\n\nvar cx = classNames.bind(styles);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  const { theme } = state;\n  const themeContextValue = useMemo(() => (createMuiTheme(theme)), [theme]);\n\n  return (\n    <ApplicationContext.Provider value={contextValue}>\n      <ThemeProvider theme={themeContextValue}>\n        <div className={cx('application')}>\n          <ApplicationHeader />\n          <div className={cx('main')}>\n            <Paper className={cx('left')} variant=\"outlined\" square>\n              Left\n            </Paper>\n            <Paper square className={cx('middle')}>\n              <Container maxWidth={false} className={cx('middle-container')}>\n                <Paper variant=\"outlined\" className={cx('canvas')}>\n                  Canvas\n              </Paper>\n              </Container>\n            </Paper>\n            <Paper className={cx('right')} variant=\"outlined\" square>\n              Right\n            </Paper>\n          </div>\n        </div>\n      </ThemeProvider>\n    </ApplicationContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './application/Application';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}